// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id           String                   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  imageUrl     String
  price        Float
  qty          Float
  unit         String
  optionGroups ProductOptionsOnGroups[]
  orders       ProductsOnOrder[]
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
}

model OptionGroups {
  id       String                   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  options  OptionOnGroups[]
  products ProductOptionsOnGroups[]
}

model Options {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  optionGroups OptionOnGroups[]
}

model OptionOnGroups {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  option         Options      @relation(fields: [optionsId], references: [id])
  optionGroup    OptionGroups @relation(fields: [optionGroupsId], references: [id])
  optionsId      String       @db.ObjectId
  optionGroupsId String       @db.ObjectId
  createdAt      DateTime     @default(now())
}

model ProductOptionsOnGroups {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  product        Products     @relation(fields: [productsId], references: [id])
  optionGroup    OptionGroups @relation(fields: [optionGroupsId], references: [id])
  createdAt      DateTime     @default(now())
  productsId     String       @db.ObjectId
  optionGroupsId String       @db.ObjectId
}

model Insured {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  gender          Gender
  name            String
  surname         String
  street          String
  houseNumber     Int
  postCode        String
  location        String
  birthDate       DateTime
  phone           String
  mail            String
  insuranceNumber String
  insurance       Insurance @relation(fields: [insuranceId], references: [id])
  level           Level
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  insuranceId     String    @db.ObjectId
  Order           Order[]
}

model Carer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  gender      Gender
  name        String
  surname     String
  street      String
  houseNumber Int
  postCode    String
  phone       String
  mail        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order[]
}

model Insurance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  Insured     Insured[]
}

model Order {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  user      User              @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  insured   Insured           @relation(fields: [insuredId], references: [id])
  carer     Carer             @relation(fields: [carerId], references: [id])
  address   Address[]
  products  ProductsOnOrder[]
  badPad    Boolean           @default(false)
  signature String
  insuredId String            @db.ObjectId
  carerId   String            @db.ObjectId
}

model ProductsOnOrder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product    Products @relation(fields: [productsId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  createdAt  DateTime @default(now())
  productsId String   @db.ObjectId
  orderId    String   @db.ObjectId
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  Frau
  Herr
  KeineAngabe
}

enum Level {
  Pflegegrad1
  Pflegegrad2
  Pflegegrad3
  Pflegegrad4
  Pflegegrad5
}

enum Address {
  Carer
  Insured
}
